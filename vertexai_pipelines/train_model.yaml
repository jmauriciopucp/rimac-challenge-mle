name: Train model
inputs:
- {name: dataset, type: Dataset}
outputs:
- {name: model, type: Model}
implementation:
  container:
    image: gcr.io/deeplearning-platform-release/tf2-cpu.2-3:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'lightgbm' 'joblib' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef train_model(\n    dataset:  Input[Dataset],\n    model: Output[Model],\
      \ \n):\n\n    import joblib\n    from sklearn.compose import make_column_transformer\n\
      \    from sklearn.preprocessing import OneHotEncoder\n    from sklearn.model_selection\
      \ import train_test_split\n    from sklearn.pipeline import make_pipeline\n\
      \    from lightgbm import LGBMClassifier\n    import pandas as pd\n\n    df\
      \ = pd.read_csv(dataset.path+\".csv\")\n    #getting numerical and categorical\
      \ variables\n    numerical= df.drop(['target'], axis=1).select_dtypes('number').columns\n\
      \    categorical = df.select_dtypes('object').columns\n\n    #One-Hot encoding\
      \ on categorical data\n    ohe = OneHotEncoder()\n    ct = make_column_transformer((ohe,\
      \ categorical),remainder='passthrough')\n\n    X_train = df.drop(columns=[\"\
      target\"])\n    y_train = df.target\n\n    #LightGBM classifier object\n   \
      \ lgbmc = LGBMClassifier(random_state=0)\n\n    #define pipe to avoid data leakage\n\
      \    pipe = make_pipeline(ct, lgbmc)\n    pipe.fit(X_train, y_train)\n\n   \
      \ model.metadata[\"framework\"] = \"LGBM\"\n    #save model into pickle file\n\
      \    joblib.dump(pipe, model.path + f\".pkl\")\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train_model
